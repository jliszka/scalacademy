
 == LEVEL 1 ==

Hey! Let's get to know each other. What's your name? Type it with quotes around it 
like this: "Jason", and hit enter.

When you're done, just type ok and hit enter.
---
hasType[String]
===
Well done! How long is your name? Find out by typing your name in quotes and ending it with .length

For me, that'd be "Jason".length

When you're done, type ok to check your answer and continue.
---
hasType[Int]
===
Great job! Now, let's do some math. You can do math in Scala!
To calculate 2+2, for instance, just type 2+2. Try it now!

Type ok when you're done.
---
hasType[Int]
hasValue[Int](4)
===
See what happened? You can use the Scala prompt to do basic math operations. Try playing around 
some more. You can use - for subtraction and * for multiplication if you want... try something
like 11 * 1111 or 999 - 123.

(Don't be afraid to experiment! The computer will never get mad at you or judge you for typing 
in something weird. Its job is to shut up and compute. If it can't make sense of what you typed,
it will simply not compute anything and instead give you a friendly message to help you try to
figure out what went wrong.)

Play around a bit and type ok when you're ready to move on.
---
===
Great. You can also use parentheses to group expressions. Try (3 + 4) * 8.

As usual, type ok to continue.
---
hasValue[Int](56)
===
You might have already noticed that spaces don't matter. Try typing 3+ 5 *  (  1 +1).

(From now on, just type ok to check your answer and move on to the next lesson.)
---
hasValue[Int](13)
===
Wait a second... were you expecting the result to be 16, not 13?
13 is correct. Scala obeys the order of operations for arithmetic you learned in grade school.

Let's try something different. Type "1" + "2", with the quotes. 
---
hasValue[String]("12")
===
Interesting! Instead of adding the numbers 1 and 2, Scala combined "1" and "2" into the sequence 
of characters "12".

In Scala, sequences of characters like this are called strings, and combining them is called 
string concatenation.

Let's try it again with your first and last names. For me that's "Jason" + "Liszka".
---
hasType[String]
===
Very good! See what happened? Your first and last names got stuck together with no space between
them. That's because a space is just another character. Try it again, this time with a space in
between.

For me that would be "Jason" + " " + "Liszka".
---
cond[String](_.contains(' '))
===
Good job!

Now let's find out the length of your full name. You can do this in a couple ways.

You could type out your full name as a string, followed by .length:
  "Jason Liszka".length

Or, you could use string concatenation to create your full name, and find the length of that:
  ("Jason" + " " + "Liszka").length

I used parentheses so Scala wouldn't get confused about what I want to know the length of.

Try both ways! And don't forget to type ok when you're done.
---
hasType[Int]
===
Nice!

You should notice that the length Scala reports is the number of characters in your first name,
plus the number of characters in your last name, PLUS one for the space.

Now is a good time to talk about how Scala responds when you type something in at the "scala>"
prompt. When you type an expression, it evaluates that expression to a value, and prints the
value along with its type.

You've encountered two types so far: String and Int. 
Strings are sequences of characters enclosed in quotes, like "hello".
Ints are integer numbers, which are the positive and negative whole numbers, including 0.

You will learn more about types later and what makes them so useful. But now, let's learn about a
new type, Boolean.

Try typing 3 == 4.
---
hasValue[Boolean](false)
===
The operation == is an equality test. The result of an equality test will be a value of type
Boolean, which just means true or false.

Try it again with 2 + 2 == 4.
---
hasValue[Boolean](true)
===
Good! You can compare any two expressions (of the same type) for equality.

There are other operations besides == that give Boolean results. Try using <, >,
<=, >=, and != and see if you can figure out what they mean. Type ok when you are done
experimenting.
---
===
You can also use == and != (equals and not-equals) to compare strings.

Try typing "Hello" + "world" == "Hello world".
---
hasValue[Boolean](false)
===
Almost tricked you! Don't forget that space counts as its own character.

Boolean values are fundamentally no different than String or Int values. You can use them in 
expressions, compare them for equality, and type them out as literal values.

Try typing true == false.
---
hasValue[Boolean](false)
===
A little tricky! Make sure you understand what just happened before moving on.

Just as Ints have +, * and -, Booleans have their own set of operations you can perform on them.
The first is && (logical AND). Try typing 1 + 1 == 2 && 1 + 2 == 4.
---
hasValue[Boolean](false)
===
Good. Now try logical OR, written with two pipes: 1 + 1 == 2 || 1 + 2 == 4.
---
hasValue[Boolean](true)
===
There. You can see that && results in true only if both sides are true, and || results in true
if either side is true.

There's also logical opposite (called NOT), written with a !. Try typing !(3 == 4).
---
hasValue[Boolean](true)
===
Great!

You can write arbitrarily complicated expressions using Strings, Ints, Bools and parentheses.
Try something like ("hi" == "Hi") && (2*2 == "abcd".length || "a"+"b" == "ab") && (true || false).

Experiment around and type ok when you're done.
---
===
Great. Now is a good time to introduce a somewhat more complicated expression. Try typing this:

if (3 == 4) "they are equal" else "they are not equal"
---
hasValue[String]("they are not equal")
===
Good! See if you can figure out what happened. Try this one:

if (1 + 1 == 2) "oh good, math works" else "uh oh!"
---
hasValue[String]("oh good, math works")
===
Great. Maybe you see it now. The general format of what programmers call an if-statement is

if (B) X else Y

where B is an expression that gives a Boolean value, and X and Y are arbitrary expressions.
If the value of B is true, the value of the ENTIRE if-statement is the value of X. 
If the value of B is false, the value of the ENTIRE if-statement is the value of Y.
It's also a good idea to make sure that X and Y have the same result type.

But the most important thing is that B must be a Boolean, or Scala won't know what to do. Try
typing if (1 + 1) "a" else "b".
---
===
Don't worry, no one got mad! Scala just told you that it was expecting a Boolean there but you
gave it an Int. No big deal, just fix it and move on.

Press the up arrow a couple of times to get back to that last if-statement, edit it so that
the part inside the parentheses is a Boolean, and hit enter to ask Scala to evaluate it again.
---
hasType[String]
===
Great work! You fixed your first bug!

I also want to emphasize that X and Y can be totally arbitrary expressions, even other
if statements! Try this crazy expression and make sure you understand what's happening. 

(if (1 == 2) 3 else 4) == (if ("a"+"b" == "ab") (if (true) 2+2 else 0) else 6)

Try evaluating it in your head or on paper and make sure you get the same result as Scala. 
If you get stuck, you can ask Scala to evaluate just part of the expression for you if you want.
---
hasValue[Boolean](true)
===
You've learned a lot! Now's a great time to experiment around and make sure you understand
everything that's happened. Strings, Ints and Booleans are the first building blocks of everything
you're about to learn, so it's important that you really get them.

To get you started, see if you can write an expression for the following situation:
Your car gets 25 miles to the gallon. Your tank holds 12 gallons and it's 1/4 full. The next gas 
station is 70 miles away. Will you make it? The result should be a String indicating whether you 
will make it or not. (Hint: you can use / for division if you need to.)

Again, don't be afraid to experiment! The computer doesn't care. Go on!
---
===
